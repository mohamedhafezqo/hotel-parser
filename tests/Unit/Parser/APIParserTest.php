<?phpnamespace App\Test\Unit\Formatter;use App\Service\Parser\APIParser;use Doctrine\Common\Collections\ArrayCollection;use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;use Symfony\Contracts\HttpClient\HttpClientInterface;use Symfony\Contracts\HttpClient\ResponseInterface;class APIParserTest extends WebTestCase{    public function testParse()    {        $response = $this->getResponseMock();        $httpClient = $this->getHttpClientMock($response);        $kernel = static::bootKernel();        $config = $kernel->getContainer()->getParameter('advertisers');        $config = new ArrayCollection($config['advertiserA']);        $parser = new APIParser($httpClient);        $results = $parser->setConfig($config)->parse();        $this->assertIsArray($results);    }    protected function getResponseMock()    {        $response = $this->createMock(ResponseInterface::class);        $response            ->expects($this->once())            ->method('getStatusCode')            ->willReturn(200)        ;        $response            ->expects($this->once())            ->method('toArray')            ->willReturn(['hotels' => []])        ;        return $response;    }    /**     * @param \PHPUnit\Framework\MockObject\MockObject $response     *     * @return \PHPUnit\Framework\MockObject\MockObject     */    public function getHttpClientMock(\PHPUnit\Framework\MockObject\MockObject $response): \PHPUnit\Framework\MockObject\MockObject    {        $httpClient = $this->createMock(HttpClientInterface::class);        $httpClient            ->expects($this->once())            ->method('request')            ->willReturn($response)        ;        return $httpClient;    }}